name: Deploy Lambda Function

on:
  push:
    branches: master

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Set up Python
      run: uv python install 3.11
    
    - name: Prepare source code
      run: |
        cd etl
        mkdir -p ../lambda-package
        
        # Copy only necessary Python files, exclude development/test files
        find . -name "*.py" \
          -not -path "./.venv/*" \
          -not -path "./tests/*" \
          -not -name "*test*.py" \
          -exec cp --parents {} ../lambda-package/ \;
        
        # Copy other necessary files (config, etc.)
        find . -name "*.json" -o -name "*.yaml" -o -name "*.yml" \
          -not -path "./.venv/*" \
          -not -path "./tests/*" \
          -exec cp --parents {} ../lambda-package/ \; 2>/dev/null || true
    
    - name: Generate requirements.txt
      run: |
        cd etl
        uv sync --frozen
        uv pip compile pyproject.toml --output-file ../lambda-package/requirements.txt
    
    - name: Build Lambda-compatible package with Docker
      run: |
        # Build the Docker image and extract the package
        docker build -t lambda-builder .
        
        # Run container and copy the zip file
        docker run --name lambda-container lambda-builder
        docker cp lambda-container:/tmp/lambda-deployment.zip ./lambda-deployment.zip
        docker rm lambda-container
    
    - name: Verify package contents (optional)
      run: |
        echo "Package size:"
        ls -lh lambda-deployment.zip
        echo "Package contents (first 20 files):"
        unzip -l lambda-deployment.zip | head -20
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Upload package to S3
      run: |
        aws s3 cp lambda-deployment.zip s3://fpl-etl-lambda/lambda-deployment-$(date +%Y%m%d%H%M%S).zip
        aws s3 cp lambda-deployment.zip s3://fpl-etl-lambda/lambda-deployment-latest.zip
    
    - name: Deploy to Lambda functions from S3
      run: |
        # Deploy to daily Lambda function
        aws lambda update-function-code \
          --function-name fpl-etl-daily \
          --s3-bucket fpl-etl-lambda \
          --s3-key lambda-deployment-latest.zip
        
        # Deploy to weekly Lambda function  
        aws lambda update-function-code \
          --function-name fpl-etl-weekly \
          --s3-bucket fpl-etl-lambda \
          --s3-key lambda-deployment-latest.zip